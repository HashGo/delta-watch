// Generated by CoffeeScript 1.3.3
(function() {
  var ModWatch, exec, fs, spawn, _ref;

  _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

  fs = require('fs');

  ModWatch = (function() {
    var handleError;

    function ModWatch() {}

    handleError = function(err, stdout, stderr) {
      if (err) {
        console.log(err.stack);
      }
      if (stdout) {
        return console.log(stdout);
      }
    };

    ModWatch.prototype.watch = function(target, recursive, handler) {
      var changeHandler, path, traverseFileSystem, watched, _watch;
      path = fs.realpathSync(target);
      console.log("delta-watch: Watching " + path);
      watched = [];
      changeHandler = function() {
        console.log("delta-watch: found change");
        if (typeof handler === "function") {
          return handler();
        } else {
          return exec(handler, handleError);
        }
      };
      traverseFileSystem = function(files, currentPath) {
        var currFiles, current, file, stats, _i, _len, _results;
        current = fs.realpathSync(currentPath);
        stats = fs.statSync(current);
        files.push(current);
        if (recursive === true && stats.isDirectory() && files.join('=').indexOf("" + current + "=") < 0) {
          currFiles = fs.readdirSync(current);
          _results = [];
          for (_i = 0, _len = currFiles.length; _i < _len; _i++) {
            file = currFiles[_i];
            _results.push((function(file) {
              var currentFile;
              currentFile = currentPath + '/' + file;
              return traverseFileSystem(files, currentFile);
            })(file));
          }
          return _results;
        }
      };
      _watch = function() {
        var folder, watchedfiles, _i, _len, _results;
        watchedfiles = [];
        traverseFileSystem(watchedfiles, target);
        _results = [];
        for (_i = 0, _len = watchedfiles.length; _i < _len; _i++) {
          folder = watchedfiles[_i];
          _results.push((function(folder) {
            var watcher;
            if (watched.indexOf(folder) === -1) {
              watched.push(folder);
              if (fs.statSync(folder).isDirectory()) {
                watcher = fs.watch;
              } else {
                watcher = fs.watchFile;
              }
              return watcher(folder, {
                persistent: true
              }, function(curr, prev) {
                changeHandler();
                return _watch();
              });
            }
          })(folder));
        }
        return _results;
      };
      return _watch();
    };

    return ModWatch;

  })();

  module.exports = new ModWatch;

}).call(this);
